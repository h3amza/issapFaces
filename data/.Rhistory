-3/2
-3/2 + 4*sqrt(3)/2
4*sqrt(3)
(4*sqrt(3))-3
((4*sqrt(3))-3)/2
((4*sqrt(3))+3)/2
((3*sqrt(3))+4)/2
2^2
sqrt((4.96)^2 + (4.59)^2)
arctan(-4.59/4.96)
sqrt((1.468)^2 + (-2.28)^2)
sqrt((1)^2 + (1.84)^2)
sqrt(1E10)
sqrt(10E6)
sqrt(10E6)/(3*10E8)
sqrt(10*1E6)/(3*10*1E8)
10*10*10*10*10*10
1E6
sqrt(1E6)/(3*1E8)
(sqrt(55^2 + 1E6)+55)/(3*1E8)
sqrt((0.69)^2 + (0.95)^2)
q()
local({pkg <- select.list(sort(.packages(all.available = TRUE)),graphics=TRUE)
if(nchar(pkg)) library(pkg, character.only=TRUE)})
q()
shiny::runApp('F:/D-july16/IDA/app2')
runApp('F:/D-july16/IDA/njApp')
install.packages("ggaph")
install.packages("ggraph")
install.packages("tidygraph")
library(tidygraph)
flareGraph <- tbl_graph(flare$vertices, flare$edges) %>%
mutate(
class = map_bfs_chr(node_is_root(), .f = function(node, dist, path, ...) {
if (dist <= 1) {
return(shortName[node])
}
path$result[[nrow(path)]]
})
)
importFrom <- match(flare$imports$from, flare$vertices$name)
importTo <- match(flare$imports$to, flare$vertices$name)
# Use class inheritance for layout but plot class imports as bundles
ggraph(flareGraph, 'dendrogram', circular = TRUE) +
geom_conn_bundle(aes(colour = stat(index)),
data = get_con(importFrom, importTo),
edge_alpha = 0.25
) +
geom_node_point(aes(filter = leaf, colour = class)) +
scale_edge_colour_distiller('', direction = 1, guide = 'edge_direction') +
coord_fixed() +
ggforce::theme_no_axes()
library(ggraph)
library(tidygraph)
flareGraph <- tbl_graph(flare$vertices, flare$edges) %>%
mutate(
class = map_bfs_chr(node_is_root(), .f = function(node, dist, path, ...) {
if (dist <= 1) {
return(shortName[node])
}
path$result[[nrow(path)]]
})
)
importFrom <- match(flare$imports$from, flare$vertices$name)
importTo <- match(flare$imports$to, flare$vertices$name)
# Use class inheritance for layout but plot class imports as bundles
ggraph(flareGraph, 'dendrogram', circular = TRUE) +
geom_conn_bundle(aes(colour = stat(index)),
data = get_con(importFrom, importTo),
edge_alpha = 0.25
) +
geom_node_point(aes(filter = leaf, colour = class)) +
scale_edge_colour_distiller('', direction = 1, guide = 'edge_direction') +
coord_fixed() +
ggforce::theme_no_axes()
install.packages("circlize")
df = read.table(textConnection("
brand_from model_from brand_to model_to
VOLVO        s80      BMW  5series
BMW    3series      BMW  3series
VOLVO        s60    VOLVO      s60
VOLVO        s60    VOLVO      s80
BMW    3series     AUDI       s4
AUDI         a4      BMW  3series
AUDI         a5     AUDI       a5
"), header = TRUE, stringsAsFactors = FALSE)
brand = c(structure(df$brand_from, names=df$model_from), structure(df$brand_to,names= df$model_to))
brand = brand[!duplicated(names(brand))]
brand = brand[order(brand, names(brand))]
brand_color = structure(2:4, names = unique(brand))
model_color = structure(2:8, names = names(brand))
library(circlize)
gap.after = do.call("c", lapply(table(brand), function(i) c(rep(2, i-1), 8)))
circos.par(gap.after = gap.after, cell.padding = c(0, 0, 0, 0))
chordDiagram(df[, c(2, 4)], order = names(brand), grid.col = model_color,
directional = 1, annotationTrack = "grid", preAllocateTracks = list(
list(track.height = 0.02))
)
circos.track(track.index = 2, panel.fun = function(x, y) {
xlim = get.cell.meta.data("xlim")
ylim = get.cell.meta.data("ylim")
sector.index = get.cell.meta.data("sector.index")
circos.text(mean(xlim), mean(ylim), sector.index, col = "white", cex = 0.6, facing = "inside", niceFacing = TRUE)
}, bg.border = NA)
for(b in unique(brand)) {
model = names(brand[brand == b])
highlight.sector(sector.index = model, track.index = 1, col = brand_color[b],
text = b, text.vjust = -1, niceFacing = TRUE)
}
circos.clear()
df
model_color
brand
gap.after
mat = matrix(sample(100, 25), 5)
rownames(mat) = letters[1:5]
colnames(mat) = letters[1:5]
mat
library(circlize)
chordDiagram(mat, directional = TRUE, transparency = 0.5)
chordDiagram(mat, directional = FALSE, transparency = 0.5)
matrix1 <- matrix(c(3611, 3439, 970, 811, 289, 2,2,1,6,74),
c(3439,1033,553,411,166,4,4,1,18,81))
matrix1 <- matrix(c(3611, 3439, 970, 811, 289, 2,2,1,6,74),
c(3439,1033,553,411,166,4,4,1,18,81),nrow=2)
matrix1 <- matrix(c(3611, 3439, 970, 811, 289, 2,2,1,6,74,
3439,1033,553,411,166,4,4,1,18,81),nrow=2)
print(matrix1)
matrix1 <- matrix(c(3611, 3439, 970, 811, 289, 2,2,1,6,74,
3439,1033,553,411,166,4,4,1,18,81))
print(matrix1)
matrix1 <- matrix(c(3611, 3439, 970, 811, 289, 2,2,1,6,74,
3439,1033,553,411,166,4,4,1,18,81),nrow=10)
print(matrix1)
matrix1 <- matrix(c(3611, 3439, 970, 811, 289, 2,2,1,6,74,
3439,1033,553,411,166,4,4,1,18,81,
970,553,23,20,69,1,0,0,0,28,
811,411,20,14,24,1,0,0,0,28),nrow=10)
print(matrix1)
matrix1 <- matrix(c(3611, 3439, 970, 811, 289, 2,2,1,6,74,
3439,1033,553,411,166,4,4,1,18,81,
970,553,23,20,69,1,0,0,0,28,
811,411,20,14,24,1,0,0,0,4),nrow=10)
print(matrix1)
matrix1 <- matrix(c(3611, 3439, 970, 811, 289, 2,2,1,6,74,
3439,1033,553,411,166,4,4,1,18,81,
970,553,23,20,69,1,0,0,0,28,
811,411,20,14,24,1,0,0,0,4,
289,166,69,69,24,3,0,0,0,0,4),nrow=10)
print(matrix1)
matrix1 <- matrix(c(3611, 3439, 970, 811, 289, 2,2,1,6,74,
3439,1033,553,411,166,4,4,1,18,81,
970,553,23,20,69,1,0,0,0,28,
811,411,20,14,24,1,0,0,0,4,
289,166,69,24,3,0,0,0,0,4),nrow=10)
print(matrix1)
chordDiagram(matrix1, directional = FALSE, transparency = 0.5)
matrix1 <- matrix(c(3611, 3439, 970, 811, 289, 2,2,1,6,74,
3439,1033,553,411,166,4,4,1,18,81,
970,553,23,20,69,1,0,0,0,28,
811,411,20,14,24,1,0,0,0,4,
289,166,69,24,3,0,0,0,0,4,
2,4,1,1,0,0,0,0,0,0),nrow=10)
library(circlize)
chordDiagram(matrix1, directional = FALSE, transparency = 0.5)
matrix1 <- matrix(c(3611, 3439, 970, 811, 289, 2,2,1,6,74,
3439,1033,553,411,166,4,4,1,18,81,
970,553,23,20,69,1,0,0,0,28,
811,411,20,14,24,1,0,0,0,4,
289,166,69,24,3,0,0,0,0,4,
2,4,1,1,0,0,0,0,0,0,
2,4,0,0,0,0,0,0,0,0),nrow=10)
print(matrix1)
chordDiagram(matrix1, directional = FALSE, transparency = 0.5)
matrix1 <- matrix(c(3611, 3439, 970, 811, 289, 2,2,1,6,74,
3439,1033,553,411,166,4,4,1,18,81,
970,553,23,20,69,1,0,0,0,28,
811,411,20,14,24,1,0,0,0,4,
289,166,69,24,3,0,0,0,0,4,
2,4,1,1,0,0,0,0,0,0,
2,4,0,0,0,0,0,0,0,0,
1,1,0,0,0,0,0,0,0,0,
6,18,0,0,0,0,0,0,0,0,
74,81,28,4,4,0,0,0,0,0),nrow=10)
print(matrix1)
chordDiagram(matrix1, directional = FALSE, transparency = 0.5)
chordDiagram(matrix1, directional = FALSE, transparency = 0.5)
chordDiagram(matrix1, directional = FALSE, transparency = 0.5)
rownames(matrix1) = c('NASA','RSA','ESA','JAXA','CSA','KAC','KAP','AEB','ANGKASA','None')
colnames(matrix1) = c('NASA','RSA','ESA','JAXA','CSA','KAC','KAP','AEB','ANGKASA','None')
print(matrix1)
chordDiagram(matrix1, directional = FALSE, transparency = 0.5)
chordDiagram(matrix1, directional = FALSE, transparency = 0.5)
chordDiagram(matrix1, directional = FALSE, transparency = 0.5)
chordDiagram(matrix1, directional = FALSE, transparency = 0.5)
chordDiagram(matrix1, directional = FALSE, transparency = 0.5)
chordDiagram(matrix1, directional = TRUE, transparency = 0.5)
chordDiagram(matrix1, directional = TRUE, transparency = 0.5)
mat = matrix1
mat
circos.par(gap.after = c(rep(2, nrow(mat)-1), 10, rep(2, ncol(mat)-1), 10))
chordDiagram(mat, annotationTrack = "grid", transparency = 0.5,
preAllocateTracks = list(track.height = 0.1))
circos.clear()
circos.par(gap.after = c(rep(2, nrow(mat)-1), 10, rep(2, ncol(mat)-1), 10))
chordDiagram(mat, annotationTrack = "grid", transparency = 0.5,
preAllocateTracks = list(track.height = 0.1))
circos.par(gap.after = c(rep(2, nrow(mat)-1), 10, rep(2, ncol(mat)-1), 10))
chordDiagram(mat, annotationTrack = "grid", transparency = 0.5,
preAllocateTracks = list(track.height = 0.1))
for(si in get.all.sector.index()) {
circos.axis(h = "top", labels.cex = 0.3, sector.index = si, track.index = 2)
}
circos.trackPlotRegion(track.index = 1, panel.fun = function(x, y) {
xlim = get.cell.meta.data("xlim")
ylim = get.cell.meta.data("ylim")
sector.name = get.cell.meta.data("sector.index")
circos.lines(xlim, c(mean(ylim), mean(ylim)), lty = 3)
for(p in seq(0, 1, by = 0.25)) {
circos.text(p*(xlim[2] - xlim[1]) + xlim[1], mean(ylim), p, cex = 0.4, adj = c(0.5, -0.2), niceFacing = TRUE)
}
circos.text(mean(xlim), 1.4, sector.name, niceFacing = TRUE)
}, bg.border = NA)
circos.clear()
chordDiagram(matrix1)
chordDiagram(matrix1,annotationTrack = "grid")
chordDiagram(matrix1)
matrix1 = matrix(c(3611,3439,970,811,289,85,
3439,1033,553,411,166,108,
970,553,23,20,69,29,
811,411,20,14,24,5,
289,166,69,24,3,4,
85,108,29,5,4,0),nrow=6)
print(matrix1)
chordDiagram(matrix1)
rownames(matrix1) = c('NASA','RSA','ESA','JAXA','CSA','OTHER')
colnames(matrix1) = c('NASA','RSA','ESA','JAXA','CSA','OTHER')
print(matrix1)
chordDiagram(matrix1)
mat = matrix1
mat
circos.par(gap.after = c(rep(2, nrow(mat)-1), 10, rep(2, ncol(mat)-1), 10))
chordDiagram(mat, annotationTrack = "grid", transparency = 0.5,
preAllocateTracks = list(track.height = 0.1))
chordDiagram(mat, annotationTrack = "grid", transparency = 0.5,
preAllocateTracks = list(track.height = 0.1))
chordDiagram(matrix1)
circos.clear()
chordDiagram(matrix1)
chordDiagram(matrix1,directional = FALSW)
chordDiagram(matrix1,directional = FALSE)
mat = matrix1
chordDiagram(matrix1,directional = FALSE)
chordDiagram(matrix1,directional = TRUE)
chordDiagram(matrix1,directional = FALSE)
matrix1 = matrix(c(3611,3439,970,811,289,85,
0,1033,553,411,166,108,
0,0,23,20,69,29,
0,0,0,14,24,5,
0,0,0,0,3,4,
0,0,0,0,0,0),nrow=6)
rownames(matrix1) = c('NASA','RSA','ESA','JAXA','CSA','OTHER')
colnames(matrix1) = c('NASA','RSA','ESA','JAXA','CSA','OTHER')
print(matrix1)
chordDiagram(matrix1,directional = FALSE)
chordDiagram(matrix1,directional = FALSE)
chordDiagram(matrix1,directional = FALSE)
chordDiagram(matrix1,directional = FALSE)
chordDiagram(matrix1,directional = FALSE)
chordDiagram(matrix1,directional = FALSE)
chordDiagram(matrix1,directional = FALSE)
library(Cairo)
CairoWin()
chordDiagram(matrix1,directional = FALSE)
CairoWin()
chordDiagram(matrix1,directional = FALSE,annotationTrack = c("name","grid"))
chordDiagram(matrix1,annotationTrack = c("name","grid"))
CairoWin()
chordDiagram(matrix1,annotationTrack = c("name","grid"))
chordDiagram(matrix1,directional = TRUE,annotationTrack = c("name","grid"))
chordDiagram(matrix1,directional = TRUE,annotationTrack = c("name","grid"))
chordDiagram(matrix1,directional = TRUE,annotationTrack = c("name","grid"))
chordDiagram(matrix1,annotationTrack = c("name","grid"))
chordDiagram(matrix1,annotationTrack = c("name","grid"),transparency = 0)
chordDiagram(matrix1,annotationTrack = c("name","grid"),transparency = 0)
chordDiagram(matrix1,annotationTrack = c("name","grid"),transparency = 0.5)
chordDiagram(matrix1,annotationTrack = c("name","grid"),transparency = 0.5,
link.sort = TRUE, link.decreasing = TRUE)
chordDiagram(matrix1,annotationTrack = c("name","grid"),transparency = 0.5,
link.sort = TRUE, link.decreasing = FALSE)
chordDiagram(matrix1,annotationTrack = c("name","grid"),transparency = 0.5,
link.sort = FALSE, link.decreasing = FALSE)
chordDiagram(matrix1,annotationTrack = c("name","grid"),transparency = 0.5,
link.sort = FALSE, link.decreasing = TRUE)
chordDiagram(matrix1,annotationTrack = c("name","grid"),transparency = 0.5,
link.sort = FALSE, link.decreasing = TRUE)
chordDiagram(matrix1,annotationTrack = c("name","grid"),transparency = 0.5,
link.sort = FALSE, link.decreasing = TRUE)
chordDiagram(matrix1,annotationTrack = c("name","grid"),transparency = 0.5,
link.sort = FALSE, link.decreasing = TRUE)
circos.clear()
chordDiagram(matrix1,annotationTrack = c("name","grid"),transparency = 0.5,
link.sort = FALSE, link.decreasing = TRUE)
CairoWin()
chordDiagram(matrix1,annotationTrack = c("name","grid"),transparency = 0.5,
link.sort = FALSE, link.decreasing = TRUE)
circos.clear()
grid.col = c(NASA = "red", RSA = "green", ESA = "blue",
JAXA = "grey", CSA = "grey", OTHER = "grey")
chordDiagram(matrix1,annotationTrack = c("name","grid"),transparency = 0.5,
link.sort = FALSE, link.decreasing = TRUE,
grid.col = grid.col)
grid.col = c(NASA = "#d53e4f", RSA = "red", ESA = "green",
JAXA = "grey", CSA = "grey", OTHER = "grey")
chordDiagram(matrix1,annotationTrack = c("name","grid"),transparency = 0.5,
link.sort = FALSE, link.decreasing = TRUE,
grid.col = grid.col)
grid.col = c(NASA = "#3288bd", RSA = "#99d594", ESA = "#e6f598",
JAXA = "#fee08b", CSA = "#fc8d59", OTHER = "#d53e4f")
chordDiagram(matrix1,annotationTrack = c("name","grid"),transparency = 0.5,
link.sort = FALSE, link.decreasing = TRUE,
grid.col = grid.col)
CairoWin()
chordDiagram(matrix1,annotationTrack = c("name","grid"),transparency = 0.5,
link.sort = FALSE, link.decreasing = TRUE,
grid.col = grid.col)
grid.col = c(NASA = "#4575b4", RSA = "#99d594", ESA = "#e0f3f8",
JAXA = "#fee08b", CSA = "#fc8d59", OTHER = "#d53e4f")
chordDiagram(matrix1,annotationTrack = c("name","grid"),transparency = 0.5,
link.sort = FALSE, link.decreasing = TRUE,
grid.col = grid.col)
grid.col = c(NASA = "#4575b4", RSA = "#99d594", ESA = "#91bfdb",
JAXA = "#fee08b", CSA = "#fc8d59", OTHER = "#d53e4f")
chordDiagram(matrix1,annotationTrack = c("name","grid"),transparency = 0.5,
link.sort = FALSE, link.decreasing = TRUE,
grid.col = grid.col)
grid.col = c(NASA = "#4575b4", RSA = "#99d594", ESA = "#e6f598",
JAXA = "#fee08b", CSA = "#fc8d59", OTHER = "#d53e4f")
chordDiagram(matrix1,annotationTrack = c("name","grid"),transparency = 0.5,
link.sort = FALSE, link.decreasing = TRUE,
grid.col = grid.col)
grid.col = c(NASA = "#3288bd", RSA = "#99d594", ESA = "#e6f598",
JAXA = "#fee08b", CSA = "#fc8d59", OTHER = "#d53e4f")
chordDiagram(matrix1,annotationTrack = c("name","grid"),transparency = 0.5,
link.sort = FALSE, link.decreasing = TRUE,
grid.col = grid.col)
kruskal.test(c(10,12,134,5))
glm(c(10,12,134,5))
df <- data.frame(group=LETTERS[1:3], count = c(1,3,5))
df
kruskal.test(count~group, data=df)
# code generates network graph of astronaut pair photographed on ISS.
library(sqldf)
library(RColorBrewer)
library(dplyr)
library(visNetwork)
library(igraph)
setwd("F:\\Projects/ISSAPFaces//data/")
# read pairs data
pairs = read.csv("pairs.txt",encoding = "utf-8",header = FALSE)
# astronauts mapped as nodes in a graph, from and to names and agencies
colnames(pairs) = c('from','to','fromA','toA')
# read astronaut data
astro_info = read.csv("astronaut-data.csv",encoding = "utf-8")
astro_info = sqldf("SELECT distinct name,agency
FROM astro_info") # only store name and agency
# df for all astronauts in the pairs data
astro_names = data.frame(name=unique(c(unique(pairs$to),unique(pairs$from))))
# edges df for network graph
network_edges <- data.frame(Source=pairs$from,
Target=pairs$to)
# each astronaut node is color coded based on agency
# for smaller agencies, 'Other' bucket is used.
color_map <- data.frame(Agency = unique(astro_info$agency), stringsAsFactors = F)
color_map <- sqldf("SELECT *, CASE WHEN Agency = '' THEN ''
WHEN Agency = 'NASA' THEN '#56BBF1'
WHEN Agency = 'ESA' THEN '#99d594'
WHEN Agency = 'RSA' THEN '#F68989'
WHEN Agency = 'JAXA' THEN '#fee08b'
WHEN Agency = 'CSA' THEN '#fc8d59'
ELSE '#e6f598' END as color
FROM color_map")
# create new df of astronaut name, agency, and agency color
astronauts = sqldf("SELECT a.name id, a.name label,ai.agency,color
FROM astro_names a
INNER JOIN astro_info ai ON a.name = ai.name
INNER JOIN color_map c ON ai.agency = c.agency")
# nodes for network are similar to astronauts df
network_nodes = sqldf("SELECT id,label,agency,color from astronauts")
# modify nodes agency labels to put others in 'Other' bin
network_nodes <- sqldf("SELECT id, label,
CASE WHEN agency IN ('KAP',
'None',
'AEB',
'KAC',
'ANGKASA') THEN 'Other'
ELSE agency
END AS agency2,color
FROM network_nodes")
# choose agency2 as new agency column
network_nodes = sqldf("SELECT id,label,agency2,color
FROM network_nodes")
# convert network edges to unique edges with width as weight
network_edges = sqldf("SELECT Source,Target,COUNT(*) AS width
FROM network_edges
GROUP BY Source,Target")
# rename for visnetwork
colnames(network_edges) <- c("from", "to", "width")
colnames(network_nodes) = c("id", "label","group","color")
# for visualization purposes only
network_nodes$font.size = 30
network_edges$width = (network_edges$width/3)+1
network_nodes$label = ""
# generate network of nodes and edges
# make network selectable
# show legend of agency names color coded as nodes
# use Fruchterman-Reingold force directed graph layout
network = visNetwork(network_nodes, network_edges) %>%
visIgraphLayout(layout = "layout_with_fr")%>%
visNodes(size = 25)%>%
visGroups(groupname = "NASA", color = "#56BBF1") %>%
visGroups(groupname = "ESA", color = "#99d594") %>%
visGroups(groupname = "RSA", color = "#F68989") %>%
visGroups(groupname = "JAXA", color = "#fee08b") %>%
visGroups(groupname = "CSA", color = "#fc8d59") %>%
visGroups(groupname = "Other", color = "#e6f598") %>%
visLegend(useGroups = TRUE)%>%
visOptions(highlightNearest = list(enabled = T, hover = T),
nodesIdSelection = T)
network
# save to directory
visSave(network,file="astronaut_network.html")
